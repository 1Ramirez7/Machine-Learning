---
title: "W2"
format: html
---


```{r}
library(dplyr) 
library(readr)
library(summarytools)


```


```{r}
# Read the CSV file
df <- read_csv("https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/cereal.csv")

# Display the first 5 rows
head(df, 5)

# Describe the specified columns
df %>% select(calories, sugars, fiber, fat, protein) %>% descr()

mfr_mapping <- c("A" = "American Home Food Products",
                 "G" = "General Mills",
                 "K" = "Kelloggs",
                 "N" = "Nabisco",
                 "P" = "Post",
                 "Q" = "Quaker Oats",
                 "R" = "Ralston Purina")

df <- df %>% mutate(manufacturer = mfr_mapping[mfr]) |>
  select(manufacturer, mfr, calories, sugars, fiber, fat, protein)

head(df, 5)
```


```{r}

library(ggplot2)

ggplot(df, aes(x = sugars, fill = manufacturer)) + geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") + labs(title = "Sugar Content in all Cereals", x = "Sugars", y = "Frequency") + theme_minimal()

```




```{r}

ggplot(df, aes(x = sugars, y = calories, color = mfr)) +
  geom_point(alpha = 0.7, size = 3) +
  labs(
    title = "Scatterplot of Sugars vs. Calories",
    x = "Sugars",
    y = "Calories"
  ) +
  theme_minimal()

```


```{r}
ggplot(df, aes(x = manufacturer, y = sugars, fill = manufacturer)) +
  geom_boxplot(alpha = 0.7) +
  labs(
    title = "Distribution of Sugar Content by Manufacturer",
    x = "Manufacturer",
    y = "Sugars"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

```

```{r}
library(tidyverse)


# Add the Weight Watchers points column
df <- df %>%
  mutate(
    ww_points = as.integer(round((calories * 0.0305) + (fat * 0.275) + (sugars * 0.12) - (protein * 0.098))))

kelloggs_df <- df %>% # Filter
  filter(manufacturer == "Kelloggs")

# Calculate summary statistics for Weight Watchers points
summary_stats <- kelloggs_df %>%
  summarise(
    mean_points = mean(ww_points, na.rm = TRUE),
    median_points = median(ww_points, na.rm = TRUE),
    sd_points = sd(ww_points, na.rm = TRUE),
    min_points = min(ww_points, na.rm = TRUE),
    max_points = max(ww_points, na.rm = TRUE)
  )

summary_stats


```



































spacer

